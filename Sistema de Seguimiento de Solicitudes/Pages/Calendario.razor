@page "/Calendario"

@using Sistema_de_Seguimiento_de_Solicitudes.Services
@using Sistema_de_Seguimiento_de_Solicitudes.Models

@inject HttpClient Http
@inject ICalendarioService CalendarioService
@inject NavigationManager Navigation
@inject IJSRuntime JSRuntime

<PageTitle>Calendario</PageTitle>

<h1>Calendario</h1>

@code {
    private DateTime currentMonth = DateTime.Today;
    private HashSet<DateTime> diasActivos = new();
    private Dictionary<DateTime, string> etiquetas = new();
    private Dictionary<DateTime, string> fechasImportantes = new();
    private DateTime? fechaEditando = null;
    private string nuevaEtiqueta = "";

    protected override async Task OnInitializedAsync()
    {
        var calendarioDTOs = await CalendarioService.ObtenerDiasActivos();
        diasActivos = new HashSet<DateTime>(calendarioDTOs.Where(d => d.Activo).Select(d => d.Fecha));

        for (int day = 1; day <= DateTime.DaysInMonth(currentMonth.Year, currentMonth.Month); day++)
        {
            var fecha = new DateTime(currentMonth.Year, currentMonth.Month, day);
            if (fecha.DayOfWeek != DayOfWeek.Saturday && fecha.DayOfWeek != DayOfWeek.Sunday)
            {
                diasActivos.Add(fecha);
            }
        }

        CargarFechasImportantes();
    }

    private void CargarFechasImportantes()
    {
        fechasImportantes = new Dictionary<DateTime, string>
            {
                [new DateTime(currentMonth.Year, 1, 1)] = "Año Nuevo",
                [new DateTime(currentMonth.Year, 2, 5)] = "Día de la Constitución",
                [new DateTime(currentMonth.Year, 3, 21)] = "Natalicio de Benito Juárez",
                [new DateTime(currentMonth.Year, 5, 1)] = "Día del Trabajo",
                [new DateTime(currentMonth.Year, 5, 5)] = "Batalla de Puebla",
                [new DateTime(currentMonth.Year, 9, 16)] = "Día de la Independencia",
                [new DateTime(currentMonth.Year, 11, 20)] = "Día de la Revolución",
                [new DateTime(currentMonth.Year, 12, 25)] = "Navidad"
            };
    }

    private void CambiarMes(int offset)
    {
        currentMonth = currentMonth.AddMonths(offset);
        CargarFechasImportantes();
        fechaEditando = null;
        nuevaEtiqueta = "";
    }

    private void AlternarDia(DateTime dia)
    {
        if (dia < DateTime.Today) return;

        if (diasActivos.Contains(dia))
            diasActivos.Remove(dia);
        else
            diasActivos.Add(dia);
    }

    private async Task GuardarCambios()
    {
        var dias = diasActivos.Select(d => new CalendarioDTO
            {
                Fecha = d,
                Activo = true
            }).ToList();

        var resultado = await CalendarioService.GuardarDiasActivos(dias);

        if (resultado)
        {
            await JSRuntime.InvokeVoidAsync("alert", "Cambios guardados correctamente");
        }
        else
        {
            await JSRuntime.InvokeVoidAsync("alert", "Error al guardar cambios");
        }
    }

    private bool EstaActivo(DateTime dia) => diasActivos.Contains(dia);

    private string ObtenerClaseDia(DateTime dia)
    {
        if (dia < DateTime.Today) return "dia pasado";
        if (fechasImportantes.ContainsKey(dia)) return "dia importante";
        return EstaActivo(dia) ? "dia activo" : "dia inactivo";
    }

    private void AsignarEtiqueta(DateTime dia)
    {
        if (!string.IsNullOrWhiteSpace(nuevaEtiqueta))
        {
            etiquetas[dia] = nuevaEtiqueta;
        }
        nuevaEtiqueta = "";
    }

    private void EditarEtiqueta(DateTime dia)
    {
        fechaEditando = dia;
    }

    private void TerminarEdicion()
    {
        fechaEditando = null;
    }
}

<div class="calendario-nav">
    <button @onclick="() => CambiarMes(-1)" class="nav-btn">← Anterior</button>
    <span class="month-name">@currentMonth.ToString("MMMM yyyy")</span>
    <button @onclick="() => CambiarMes(1)" class="nav-btn">Siguiente →</button>
</div>

<div class="calendario">
    @foreach (var dayName in new[] { "Lun", "Mar", "Mié", "Jue", "Vie", "Sáb", "Dom" })
    {
        <div class="dia encabezado">@dayName</div>
    }

    @for (int i = 0; i < (int)new DateTime(currentMonth.Year, currentMonth.Month, 1).DayOfWeek - 1; i++)
    {
        <div class="dia vacio"></div>
    }

    @foreach (var day in Enumerable.Range(1, DateTime.DaysInMonth(currentMonth.Year, currentMonth.Month)))
    {
        var fecha = new DateTime(currentMonth.Year, currentMonth.Month, day);
        <div class="@ObtenerClaseDia(fecha)" @onclick="() => AlternarDia(fecha)">
            @fecha.Day

            @if (fechasImportantes.ContainsKey(fecha))
            {
                <span class="etiqueta importante">@fechasImportantes[fecha]</span>
            }

            @if (etiquetas.ContainsKey(fecha))
            {
                <span class="etiqueta-personal" @onclick="() => EditarEtiqueta(fecha)">
                    @etiquetas[fecha]
                </span>
            }

            @if (fechaEditando == fecha)
            {
                <input type="text"
                       @bind="nuevaEtiqueta"
                       @onblur="() => AsignarEtiqueta(fecha)"
                       class="input-etiqueta"
                       placeholder="Nueva etiqueta" />
            }
        </div>
    }
</div>

<button @onclick="GuardarCambios" class="guardar-btn">Guardar Cambios</button>