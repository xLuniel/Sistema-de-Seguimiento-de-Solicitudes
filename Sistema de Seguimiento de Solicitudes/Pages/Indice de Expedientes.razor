@page "/indice-expedientes"

<link href="css/app.css" rel="stylesheet" />

@using System.Collections.Generic
@using SolicitudesShared
@using Sistema_de_Seguimiento_de_Solicitudes.Services
@using System.Text.Json

@inject HttpClient Http
@inject NavigationManager Navigation
@inject IJSRuntime JSRuntime

@inject IExpedienteService ExpedienteService

<!-- SSSSSS -->

<PageTitle>Expedientes</PageTitle>

<h3>Índice de Expedientes</h3>

<!-- Toca arreglar esta cosa -->
<input @bind="Filtro" placeholder="Buscar expediente..." />
<button @onclick="FiltrarExpedientes" class="btn-buscar">Buscar</button>

<!-- Botón para agregar nuevo expediente -->
<button class="btn-agregar" @onclick="MostrarFormulario">Agregar Expediente</button> 

<!-- Modal de formulario para creación de expediente -->
@if (MostrarFormularioModal)
{
    <div class="modal" style="display: block;" >
        <div class="modal-contenido">
            <h4>Nuevo Expediente</h4>
            <EditForm Model="NuevoExpediente" OnValidSubmit="GuardarExpediente">
                <DataAnnotationsValidator />
                <ValidationSummary />

                <div>
                    <label for="Folio">Folio</label>
                    <InputText id="Folio" @bind-Value="NuevoExpediente.Folio" />

                    <label for="Nombre">Nombre</label>
                    <InputText id="Nombre" @bind-Value="NuevoExpediente.NombreSolicitante" />

                    <label for="FechaInicioTramite">Fecha de Inicio</label>
                    <InputDate id="FechaInicioTramite" @bind-Value="NuevoExpediente.FechaInicio" />

                    <label for="Estatus">Estatus</label>
                    <InputText id="Estatus" @bind-Value="NuevoExpediente.Estado" />
                </div>

                <div>
                    <label for="ContenidoSolicitud">Contenido de la Solicitud</label>
                    <InputTextArea id="ContenidoSolicitud" @bind-Value="NuevoExpediente.ContenidoSolicitud" rows="4" style="width: 100%;" />
                </div>

                <button type="submit">Guardar</button>
                <button @onclick="CerrarFormulario">Cancelar</button>
            </EditForm>
        </div>
    </div>
}  

<div class="table-responsive">
    <table class="table">
        <thead>
            <tr>
                <th>DETALLES</th>
                <th>ID</th>
                <th>FOLIO</th>
                <th>NOMBRE</th>
                <th>FECHA DE INICIO</th>
                <th>ESTATUS</th>
                <th>CONTENIDO DE LA SOLICITUD</th>
            </tr>
        </thead>
        <tbody>
            @if (listaExpedientes != null){
                @foreach (var expediente in listaExpedientes) // ExpedientesFiltrados
                {
                    <tr>
                        <td>
                            <button @onclick="() => VerDetalle(expediente.Id)">Ver</button>
                        </td>
                        <td>@expediente.Id</td>
                        <td>@expediente.Folio</td>
                        <td>@expediente.NombreSolicitante</td>
                        <td>@(expediente.FechaInicio.ToString("dd/MM/yyyy") ?? "N/A")</td>
                        <td>@expediente.Estado</td>
                        <td>
                            <!-- Truncar el contenido y mostrar "Ver más" si es largo -->
                            <span class="truncate">
                                @expediente.ContenidoSolicitud
                            </span>
                            @if (expediente.ContenidoSolicitud?.Length > 150)
                            {
                                <span class="ver-mas" @onclick="() => OpenModal(expediente.ContenidoSolicitud)">
                                    Ver más
                                </span>
                            }
                        </td>
                    </tr>
                }
            }
            else
            {
                <tr>Cargando...</tr>
            }
        </tbody>
    </table>
</div>


<!-- Modal para ver el contenido completo de la solicitud -->
<div id="myModal" class="modal">
    <div class="modal-content">
        <span class="close" @onclick="CloseModal">&times;</span>
        <h2>Contenido de la Solicitud</h2>
        <p>@modalContenido</p> <!-- Mostrar el contenido completo de la solicitud -->
    </div>
</div> 

@code {
    private string Filtro { get; set; } = "";
    //private List<Expediente> Expedientes { get; set; } = new();

    private bool MostrarModal { get; set; } = false;
    private bool MostrarFormularioModal { get; set; } = false;
    private int IdEliminar { get; set; }
    private string MensajeError { get; set; } = "";
    private bool MostrarMensajeError { get; set; } = false;
    private string modalContenido = "";  // Variable para almacenar el contenido a mostrar de la solicitud

    List<ExpedienteDTO>? listaExpedientes = null;
    private List<ExpedienteDTO> ExpedientesFiltrados { get; set; } = new();

     private ExpedienteDTO NuevoExpediente { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        listaExpedientes = await ExpedienteService.Lista(); // Recuperar datos de la base de datos en forma de lista
        
        NuevoExpediente.FechaInicio = DateTime.Now;
    }

    private async Task FiltrarExpedientes()
    {
        ExpedientesFiltrados = listaExpedientes!
            .Where(e => e.NombreSolicitante!.Contains(Filtro, StringComparison.OrdinalIgnoreCase) ||
                        e.Id.ToString().Contains(Filtro))
            .ToList();

        await Task.CompletedTask;
    }

    private async Task VerDetalle(int id)
    {
        var expediente = listaExpedientes!.FirstOrDefault(e => e.Id == id);
        if (expediente != null)
        {
            Navigation.NavigateTo($"/indice-expedientes/detalles/{id}/{expediente.Folio}");
        }
        await Task.CompletedTask;
    }

    private void MostrarFormulario()
    {
        MostrarFormularioModal = true;
    }

    private void CerrarFormulario()
    {
        MostrarFormularioModal = false;
    }

    private async Task GuardarExpediente()
    {
        //Verificar si el Folio o el Nombre ya existen en la lista
        if (listaExpedientes!.Any(e => e.Folio == NuevoExpediente.Folio))
        {
            await MostrarAlerta("ERROR: EL FOLIO YA EXISTE.");
            return; 
        }

        if (listaExpedientes!.Any(e => e.NombreSolicitante == NuevoExpediente.NombreSolicitante))
        {
            await MostrarAlerta("ERROR: EL NOMBRE YA EXISTE.");
            return; 
        }

        Console.WriteLine($"Nuevo expediente: {JsonSerializer.Serialize(NuevoExpediente)}");

        // Guardar el nuevo expediente en la base de datos
        await ExpedienteService.Crear(NuevoExpediente);

        // Actualizar la lista de expedientes
        listaExpedientes = await ExpedienteService.Lista();



        // Cerrar formulario
        MostrarFormularioModal = false;

    }

    private async Task MostrarAlerta(string mensaje)
    {
        MensajeError = mensaje;
        MostrarMensajeError = true;

        // Ocultar el mensaje después de 3 segundos
        await Task.Delay(4000).ContinueWith(_ =>
        {
            MostrarMensajeError = false;
            StateHasChanged();
        });

        await Task.CompletedTask;
    }

    // Función para abrir el modal con el contenido
    private async Task OpenModal(string contenido)
    {
        modalContenido = contenido;
        await JSRuntime.InvokeVoidAsync("eval", "document.getElementById('myModal').style.display = 'block';"); // Mostrar el modal
    }

    // Función para cerrar el modal
    private async Task CloseModal()
    {
        await JSRuntime.InvokeVoidAsync("eval", "document.getElementById('myModal').style.display = 'none';"); // Ocultar el modal
    }
}

@if (MostrarMensajeError)
     {
         <div class="alerta flotante">
             @MensajeError
         </div>
     }

