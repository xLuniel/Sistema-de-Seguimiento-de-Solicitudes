@page "/indice-expedientes"

@using System.Collections.Generic
@inject HttpClient Http
@inject NavigationManager Navigation

<h3>Índice de Expedientes</h3>

<input @bind="Filtro" placeholder="Buscar expediente..." />
<button @onclick="FiltrarExpedientes">Buscar</button>

<!-- Barra de Etapas -->
<div class="etapas">
    <div class="etapa etapa-inicial">Etapa Inicial</div>
    <div class="etapa etapa-seguimiento">Etapa de Seguimiento</div>
    <div class="etapa etapa-final">Etapa Final</div>
</div>

<!-- Botón para agregar nuevo expediente -->
<button @onclick="MostrarFormulario">Agregar Expediente</button>

<!-- Modal de formulario de creación de expediente -->
@if (MostrarFormularioModal)
{
    <div class="modal" style="display: block;">
        <div class="modal-contenido">
            <h4>Nuevo Expediente</h4>
            <EditForm Model="NuevoExpediente" OnValidSubmit="GuardarExpediente">
                <DataAnnotationsValidator />
                <ValidationSummary />

                <div>
                    <label for="Folio">Folio</label>
                    <InputText id="Folio" @bind-Value="NuevoExpediente.Folio" />
                </div>

                <div>
                    <label for="Nombre">Nombre</label>
                    <InputText id="Nombre" @bind-Value="NuevoExpediente.Nombre" />
                </div>

                <div>
                    <label for="FechaInicioTramite">Fecha de Inicio</label>
                    <InputDate id="FechaInicioTramite" @bind-Value="NuevoExpediente.FechaInicioTramite" />
                </div>

                <div>
                    <label for="Estatus">Estatus</label>
                    <InputText id="Estatus" @bind-Value="NuevoExpediente.Estatus" />
                </div>

                <button type="submit">Guardar</button>
                <button @onclick="CerrarFormulario">Cancelar</button>
            </EditForm>
        </div>
    </div>
}

<!-- Modal de confirmación -->
<div class="modal" style="display: @(MostrarModal ? "block" : "none")">
    <div class="modal-contenido">
        <h4>¿Estás seguro de que deseas eliminar este expediente?</h4>
        <p>ID: @IdEliminar</p>
        <button @onclick="ConfirmarEliminacion">Eliminar</button>
        <button @onclick="CancelarEliminacion">Cancelar</button>
    </div>
</div>

<table class="table">
    <thead>
        <tr>
            <th>Acciones</th>
            <th>ID</th>
            <th>FOLIO</th>
            <th>NOMBRE</th>
            <th>FECHA DE INICIO</th>
            <th>ESTATUS</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var expediente in ExpedientesFiltrados)
        {
            <tr>
                <td>
                    <button @onclick="() => VerDetalle(expediente.Id)">Ver</button>
                    <button @onclick="() => EliminarExpediente(expediente.Id)" class="btn-eliminar">Eliminar</button>
                </td>
                <td>@expediente.Id</td>
                <td>@expediente.Folio</td>
                <td>@expediente.Nombre</td>
                <td>@expediente.FechaInicioTramite.ToString("dd/MM/yyyy")</td>
                <td>@expediente.Estatus</td>
            </tr>
        }
    </tbody>
</table>

@code {
    private string Filtro { get; set; } = "";
    private List<Expediente> Expedientes { get; set; } = new();
    private List<Expediente> ExpedientesFiltrados { get; set; } = new();
    private bool MostrarModal { get; set; } = false;
    private bool MostrarFormularioModal { get; set; } = false;
    private int IdEliminar { get; set; }

    private Expediente NuevoExpediente { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        // Simulación de carga de datos (puedes hacer una petición HTTP en su lugar)
        Expedientes = new List<Expediente>
        {
            new Expediente { Id = 1, Folio = "F001", Nombre = "Juan Perez", FechaInicioTramite = DateTime.Now.AddDays(-10), Estatus = "En proceso" },
            new Expediente { Id = 2, Folio = "F002", Nombre = "Maria Lopez", FechaInicioTramite = DateTime.Now.AddDays(-5), Estatus = "Finalizado" }
        };
        ExpedientesFiltrados = new List<Expediente>(Expedientes);
    }

    private void FiltrarExpedientes()
    {
        ExpedientesFiltrados = Expedientes
            .Where(e => e.Nombre.Contains(Filtro, StringComparison.OrdinalIgnoreCase) ||
                        e.Id.ToString().Contains(Filtro))
            .ToList();
    }

    private void VerDetalle(int id)
    {
        // Redirigir a la página de detalles (ajusta la ruta según tu aplicación)
        Navigation.NavigateTo($"/detalle-expediente/{id}");
    }

    private void EliminarExpediente(int id)
    {
        IdEliminar = id;
        MostrarModal = true;
    }

    private void ConfirmarEliminacion()
    {
        var expediente = Expedientes.FirstOrDefault(e => e.Id == IdEliminar);
        if (expediente != null)
        {
            Expedientes.Remove(expediente);
            ExpedientesFiltrados = new List<Expediente>(Expedientes);
            MostrarModal = false;
        }
    }

    private void CancelarEliminacion()
    {
        MostrarModal = false;
    }

    private void MostrarFormulario()
    {
        MostrarFormularioModal = true;
    }

    private void CerrarFormulario()
    {
        MostrarFormularioModal = false;
    }

    private void GuardarExpediente()
    {
        // Aquí se puede agregar la lógica para almacenar el expediente, por ejemplo, enviarlo a una base de datos
        Expedientes.Add(NuevoExpediente);
        ExpedientesFiltrados = new List<Expediente>(Expedientes);
        MostrarFormularioModal = false;
    }

    private class Expediente
    {
        public int Id { get; set; }
        public string Folio { get; set; }
        public string Nombre { get; set; }
        public DateTime FechaInicioTramite { get; set; }
        public string Estatus { get; set; }
    }
}

<style>
    .etapas {
        display: flex;
        justify-content: space-around;
        margin-bottom: 20px;
    }

    .etapa {
        padding: 10px;
        font-weight: bold;
        color: white;
        text-align: center;
        border-radius: 5px;
        flex-grow: 1;
    }

    .etapa-inicial {
        background-color: red;
    }

    .etapa-seguimiento {
        background-color: blue;
    }

    .etapa-final {
        background-color: yellow;
        color: black;
    }

    .btn-eliminar {
        background: transparent;
        border: none;
        color: red;
        font-size: 16px;
        cursor: pointer;
    }

        .btn-eliminar:hover {
            text-decoration: underline;
        }

    .modal {
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background-color: rgba(0, 0, 0, 0.5);
        display: flex;
        justify-content: center;
        align-items: center;
    }

    .modal-contenido {
        background-color: white;
        padding: 20px;
        border-radius: 5px;
        text-align: center;
    }

        .modal-contenido button {
            margin: 5px;
        }
</style>
