@page "/Elim/{id?}"

@* Este atributo indica que la página requiere que el usuario esté autenticado *@
@attribute [Authorize]

@* Se importa el espacio de nombres necesario para usar el atributo [Authorize] *@
@using Microsoft.AspNetCore.Authorization

@using SolicitudesShared
@using Sistema_de_Seguimiento_de_Solicitudes.Services
@using CurrieTechnologies.Razor.SweetAlert2

@inject IExpedienteService ExpedienteService
@inject SweetAlertService Swal
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime



<PageTitle>Eliminar</PageTitle>

<h3>Eliminacion de Expedientes</h3>

<!-- Campo de Busqueda -->
<div class="d-flex align-items-center gap-2 mb-3">
    <input type="text" class="form-control" placeholder="🔍 Buscar por nombre, folio, fecha, año..." @bind="Filtro" @bind:event="oninput" style="flex: 1;" />
</div>

<div class="table-responsive">
    <table class="table">
	    <thead>
		    <tr>
			    <th>ID</th>
			    <th>FOLIO</th>
			    <th>NOMBRE</th>
			    <th>FECHA DE INICIO</th>
			    <th>ESTATUS</th>
			    <th>ELIMINAR</th>
		    </tr>	
	    </thead>
        <tbody>
            @if (ExpedientesFiltrados != null && ExpedientesFiltrados.Any())
            {
                foreach (var expediente in PagedExpedientes.OrderByDescending(e => e.Id))
                {
                    <tr>
                        <td>@expediente.Id</td>
                        <td>@expediente.Folio</td>
                        <td>@expediente.NombreSolicitante</td>
                        <td>@(expediente.FechaInicio.ToString("dd/MM/yyyy") ?? "N/A")</td>
                        <td>@expediente.Estado</td>
                        <td>
                            <button class="btn btn-danger" @onclick="() => Eliminar(expediente.Id)">
                                <i class="bi bi-trash">Eliminar</i>
                            </button>
                        </td>
                    </tr>
                }
            }
            else
            {
                <tr>
                    <td colspan="6" class="text-center">No se encontraron expedientes.</td>
                </tr>
            }
        </tbody>
    </table>

    <div class="d-flex justify-content-center align-items-center mt-3" style="padding-bottom: 16px">
        <button class="btn btn-primary mx-2" @onclick="PrevPage" disabled="@(currentPage <= 1)">
            Anterior
        </button>
        <span>Página @currentPage de @totalPages</span>
        <button class="btn btn-primary mx-2" @onclick="NextPage" disabled="@(currentPage >= totalPages)">
            Siguiente
        </button>
    </div>
</div>

@code {
	[Parameter]
	public string? Id { get; set; }

	List<ExpedienteDTO>? listaExpedientes = null;
    private List<ExpedienteDTO> ExpedientesFiltrados { get; set; } = new();

    private string _filtro = string.Empty;
    private string Filtro
    {
        get => _filtro;
        set
        {
            if (_filtro != value)
            {
                _filtro = value;
                FiltrarExpedientes(); // Aquí ejecutamos el filtro
                currentPage = 1; // Resetea la página al aplicar el filtro
            }
        }
    }
    private int currentPage = 1;
    private int pageSize = 12; // Cantidad de solicitudes por pagina
    private int totalPages => (ExpedientesFiltrados.Count + pageSize - 1) / pageSize;

    // Lista paginada
    private IEnumerable<ExpedienteDTO> PagedExpedientes => ExpedientesFiltrados
        .OrderByDescending(e => e.Id)
        .Skip((currentPage - 1) * pageSize)
        .Take(pageSize);


    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            // Invoca la función global definida en pagsize.js
            pageSize = await JSRuntime.InvokeAsync<int>("getPageSizeBasedOnResolution");
            StateHasChanged();
        }
    }

	protected override async Task OnInitializedAsync()
    {
        listaExpedientes = await ExpedienteService.Lista();

        // Genera un ID aleatorio para la ruta
        var randomNumber = new Random().Next(1000, 9999);
        var guidPart = Guid.NewGuid().ToString().Substring(0, 4); // Solo los primeros 4 caracteres
        Id = $"{randomNumber}-{guidPart}";
        NavigationManager.NavigateTo($"/Elim/{Id}");

        ExpedientesFiltrados = new List<ExpedienteDTO>(listaExpedientes.OrderByDescending(e => e.Id));
    }

    // Filtro de búsqueda
    private void FiltrarExpedientes()
    {
        ExpedientesFiltrados = listaExpedientes!
            .Where(e =>
                string.IsNullOrWhiteSpace(Filtro) ||
                (e.Folio != null && e.Folio.Contains(Filtro, StringComparison.OrdinalIgnoreCase)) ||
                (e.Estado != null && e.Estado.Contains(Filtro, StringComparison.OrdinalIgnoreCase)) ||
                (e.NombreSolicitante != null && e.NombreSolicitante.Contains(Filtro, StringComparison.OrdinalIgnoreCase)) ||
                e.Id.ToString().Contains(Filtro) ||
                (DateTime.TryParse(Filtro, out DateTime fechaFiltro) && e.FechaInicio.Date == fechaFiltro.Date) ||
                (int.TryParse(Filtro, out int anoFiltro) && e.AnoAdmision == anoFiltro) ||
                (int.TryParse(Filtro, out int anioFechaInicio) && e.FechaInicio.Year == anioFechaInicio)
            )
            .ToList();

        StateHasChanged();
    }

    private async Task Eliminar(int id)
    {
        var resultado1 = await Swal.FireAsync(new SweetAlertOptions
            {
                Title = "¿Estás seguro?",
                Text = "¡No podrás revertir esto!",
                Icon = SweetAlertIcon.Warning,
                ShowCancelButton = true,
                ConfirmButtonText = "Sí, continuar",
                CancelButtonText = "Cancelar",
            });

        if (resultado1.IsConfirmed)
        {
            var resultado2 = await Swal.FireAsync(new SweetAlertOptions
                {
                    Title = "¿Realmente estás seguro?",
                    Text = "Esta es tu última oportunidad para cancelar.",
                    Icon = SweetAlertIcon.Warning,
                    ShowCancelButton = true,
                    ConfirmButtonText = "Sí, estoy seguro",
                    CancelButtonText = "Cancelar",
                });

            if (resultado2.IsConfirmed)
            {
                var resultado3 = await Swal.FireAsync(new SweetAlertOptions
                    {
                        Title = "¡Confirmación final!",
                        Text = "¿De verdad quieres eliminar este expediente? Esta acción no se puede deshacer.",
                        Icon = SweetAlertIcon.Warning,
                        ShowCancelButton = true,
                        ConfirmButtonText = "Sí, eliminar definitivamente",
                        CancelButtonText = "Cancelar",
                    });

                if (resultado3.IsConfirmed)
                {
                    var eliminado = await ExpedienteService.Eliminar(id);

                    if (eliminado)
                    {
                        await Swal.FireAsync(new SweetAlertOptions
                            {
                                Title = "¡Eliminado!",
                                Text = "El expediente ha sido eliminado.",
                                Icon = SweetAlertIcon.Success,
                            });
                        listaExpedientes = await ExpedienteService.Lista();
                    }
                    else
                    {
                        await Swal.FireAsync(new SweetAlertOptions
                            {
                                Title = "¡Error!",
                                Text = "Ha ocurrido un error al intentar eliminar el expediente.",
                                Icon = SweetAlertIcon.Error,
                            });
                    }
                }
            }
        }
    }
    
    // Métodos para la paginación
    private void PrevPage()
    {
        if (currentPage > 1)
            currentPage--;
    }

    private void NextPage()
    {
        if (currentPage < totalPages)
            currentPage++;
    }
}
