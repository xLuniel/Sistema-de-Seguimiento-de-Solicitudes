@page "/menu/modulo-solicitudes/CalendarioRadzen"

@attribute [Authorize]
@*@attribute [Authorize(Roles = "ADMINISTRADOR,CAPTURISTA,OBSERVADOR")]*@

@using Microsoft.AspNetCore.Authorization
@using Sistema_de_Seguimiento_de_Solicitudes.Models
@using Sistema_de_Seguimiento_de_Solicitudes.Services
@using Radzen
@using System.Text.Json

@inject DialogService DialogService
@inject IExpedienteService ExpedienteService


<PageTitle>Calendario</PageTitle>

<RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" Gap="0.5rem" class="rz-p-4 rz-mb-6 rz-border-radius-1" Style="border: var(--rz-grid-cell-border);height:4rem;">
    <RadzenLabel Text="Show Header:  " />
    <RadzenSwitch @bind-Value=@showHeader />
</RadzenStack>

<RadzenScheduler @ref=@scheduler SlotRender=@OnSlotRender style="height: 768px;" TItem="EventoSolicitud" Data=@eventos StartProperty="Start" EndProperty="End" ShowHeader=@showHeader
TextProperty="Title" SelectedIndex="2">
    @* SlotSelect=@OnSlotSelect AppointmentSelect=@OnAppointmentSelect AppointmentRender=@OnAppointmentRender DaySelect="@OnDaySelect"
    AppointmentMove=@OnAppointmentMove *@
    <RadzenDayView />
    <RadzenWeekView />
    <RadzenMonthView />
</RadzenScheduler>

@* <EventConsole @ref=@console /> *@

@code {
    RadzenScheduler<EventoSolicitud> scheduler;
    // EventConsole console;
    Dictionary<DateTime, string> events = new Dictionary<DateTime, string>();

    bool showHeader = true;

    // public class EventoSolicitud
    // {
    //     public string Title { get; set; } = "";
    //     public DateTime Start { get; set; }
    //     public DateTime End { get; set; }
    // }

    private List<EventoSolicitud> eventos = new List<EventoSolicitud>();

	protected override async Task OnInitializedAsync()
	{
		// Fetch the data from the service
		var expedienteList = await ExpedienteService.Lista();

		// Map the data to the list of events
		eventos = expedienteList
		    .Where(expediente => expediente.FechaInicio != null)
            .Select(expediente => 
			{
				// Elige la fecha limite segun el tipo de expediente
				DateTime end = expediente.TipoSolicitud == "ARCO"
                    ? (expediente.FechaLimiteRespuesta20dias ?? expediente.FechaInicio)
					: (expediente.FechaLimiteRespuesta10dias ?? expediente.FechaInicio);
				
                // Si tiene prevención activa, podrías superponer otro evento:
                //    Title = $"{e.Folio} (Prevención)", Start = e.FechaLimitePrevencion, End = ...
                return new EventoSolicitud
                {
                    Title = $"{expediente.Folio} – {expediente.NombreSolicitante}",
                    Start = expediente.FechaInicio,
                    End = end

					};

				// Title = expediente.Titulo,
				// Start = expediente.FechaCreacion,
				// End = expediente.FechaCreacion.AddDays(1) // Assuming you want to add 1 day to the start date
			}).ToList();
	}

    // IList<Expediente> appointments = new List<Appointment>
    // {
    //     new Appointment { Start = DateTime.Today.AddDays(-2), End = DateTime.Today.AddDays(-2), Text = "Birthday" },
    //     new Appointment { Start = DateTime.Today.AddDays(-11), End = DateTime.Today.AddDays(-10), Text = "Day off" },
    //     new Appointment { Start = DateTime.Today.AddDays(-10), End = DateTime.Today.AddDays(-8), Text = "Work from home" },
    //     new Appointment { Start = DateTime.Today.AddHours(10), End = DateTime.Today.AddHours(12), Text = "Online meeting" },
    //     new Appointment { Start = DateTime.Today.AddHours(10), End = DateTime.Today.AddHours(13), Text = "Skype call" },
    //     new Appointment { Start = DateTime.Today.AddHours(14), End = DateTime.Today.AddHours(14).AddMinutes(30), Text = "Dentist appointment" },
    //     new Appointment { Start = DateTime.Today.AddDays(1), End = DateTime.Today.AddDays(12), Text = "Vacation" },
    // };

    // void OnDaySelect(SchedulerDaySelectEventArgs args)
    // {
    //     console.Log($"DaySelect: Day={args.Day} AppointmentCount={args.Appointments.Count()}");
    // }

    void OnSlotRender(SchedulerSlotRenderEventArgs args)
    {
        // Highlight today in month view
        if (args.View.Text == "Month" && args.Start.Date == DateTime.Today)
        {
            args.Attributes["style"] = "background: var(--rz-scheduler-highlight-background-color, rgba(255,220,40,.2));";
        }

        // Highlight working hours (9-18)
        if ((args.View.Text == "Week" || args.View.Text == "Day") && args.Start.Hour > 8 && args.Start.Hour < 19)
        {
            args.Attributes["style"] = "background: var(--rz-scheduler-highlight-background-color, rgba(255,220,40,.2));";
        }
    }

    // async Task OnSlotSelect(SchedulerSlotSelectEventArgs args)
    // {
    //     console.Log($"SlotSelect: Start={args.Start} End={args.End}");

    //     if (args.View.Text != "Year")
    //     {
    //         Appointment data = await DialogService.OpenAsync<AddAppointmentPage>("Add Appointment",
    //             new Dictionary<string, object> { { "Start", args.Start }, { "End", args.End } });

    //         if (data != null)
    //         {
    //             appointments.Add(data);
    //             // Either call the Reload method or reassign the Data property of the Scheduler
    //             await scheduler.Reload();
    //         }
    //     }
    // }

    // async Task OnAppointmentSelect(SchedulerAppointmentSelectEventArgs<EventoSolicitud> args)
    // {
    //     //console.Log($"AppointmentSelect: Appointment={args.Data.Text}");

    //     var copy = new EventoSolicitud
    //     {
    //         Start = args.Data.Start,
    //         End = args.Data.End,
    //         Title = args.Data.Title
    //     };

    //     var data = await DialogService.OpenAsync<EditAppointmentPage>("Edit Appointment", new Dictionary<string, object> { { "Appointment", copy } });

    //     if (data != null)
    //     {
    //         // Update the appointment
    //         args.Data.Start = data.Start;
    //         args.Data.End = data.End;
    //         args.Data.Text = data.Text;
    //     }

    //     await scheduler.Reload();
    // }

    // void OnAppointmentRender(SchedulerAppointmentRenderEventArgs<Appointment> args)
    // {
    //     // Never call StateHasChanged in AppointmentRender - would lead to infinite loop

    //     if (args.Data.Text == "Birthday")
    //     {
    //         args.Attributes["style"] = "background: red";
    //     }
    // }

    // async Task OnAppointmentMove(SchedulerAppointmentMoveEventArgs args)
    // {
    //     var draggedAppointment = EventoSolicitud.FirstOrDefault(x => x == args.Appointment.Data);

    //     if (draggedAppointment != null)
    //     {
    //         var duration = draggedAppointment.End - draggedAppointment.Start;

    //         if (args.SlotDate.TimeOfDay == TimeSpan.Zero)
    //         {
    //             draggedAppointment.Start = args.SlotDate.Date.Add(draggedAppointment.Start.TimeOfDay);
    //         }
    //         else
    //         {
    //             draggedAppointment.Start = args.SlotDate;
    //         }

    //         draggedAppointment.End = draggedAppointment.Start.Add(duration);

    //         await scheduler.Reload();
    //     }
    // }
}