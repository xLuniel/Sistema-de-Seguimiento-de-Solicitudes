@page "/login"

@using Microsoft.AspNetCore.Components.Authorization
@using Sistema_de_Seguimiento_de_Solicitudes.Services.LoginServices
@using SolicitudesShared
@using System.Text.Json

@layout LoginLayout

@inject AuthService AuthService
@inject CustomAuthenticationStateProvider CustomAuthStateProvider
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthStateProvider
@inject IJSRuntime js

<div class="login-container">
    <div class="login-content">
        <div class="login-form">
            <h3>Inicio de Sesion</h3>
            <EditForm Model="sessionLogin" OnValidSubmit="LoginClicked">
                <DataAnnotationsValidator />
                <ValidationSummary />
                <div class="form-group">
                    <label for="username">Nombre de Usuario</label>
                    <InputText @bind-Value="sessionLogin.NombreUsuario" class="form-control" id="username" placeholder="Ingrese Nombre de Usuario" />
                </div>
                <div class="form-group">
                    <label for="password">Contraseña</label>
                    <input type="password" @bind="sessionLogin.password" class="form-control" id="password" placeholder="Ingrese Contraseña" />
                </div>
                <div class="form-group mt-3">
                    <button type="submit" class="btn btn-primary" disabled="@IsLoading">
                        @(IsLoading ? "Iniciando sesión ..." : "Aceptar")
                    </button>
                </div>
                <div class="mt-3" style="text-align: center;">
                    @if (IsLoading)
                    {
                        <div class="spinner-border text-primary" role="status">
                            <span class="visually-hidden">Loading...</span>
                        </div>
                    }
                </div>
            </EditForm>
            @if (!string.IsNullOrEmpty(errorMessage))
            {
                <div class="alert alert-danger mt-2">@errorMessage</div>
            }
        </div>
    </div>
</div>

@code {
    private bool IsLoading = false;
    private string errorMessage = string.Empty;


    private LoginDTO sessionLogin { get; set; } = new LoginDTO
        {
            NombreUsuario = string.Empty,
            password = string.Empty
        };

    private async Task LoginClicked()
    {
        IsLoading = true;
        errorMessage = string.Empty;

        try
        {
            LoginResponse response = await AuthService.Login(sessionLogin) ;
            response.Flag = true;
            IsLoading = false;



            if (!response.Flag)
            {
                await js.InvokeVoidAsync("alerta", response.Message ?? "error desconocido");
            }
            else
            {
                await CustomAuthStateProvider.SetToken(response.Token);

                //var authState = await AuthStateProvider.GetAuthenticationStateAsync();

                 NavigationManager.NavigateTo("/menu", forceLoad: true);
                
				
            }
            
           
        }
        catch (Exception ex)
        {
            errorMessage = ex.Message;
        }
        finally
        {
            IsLoading = false; // Asegurar que se reestablezca aunque haya error
        }
    }
}