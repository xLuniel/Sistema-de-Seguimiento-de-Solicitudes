@page "/indice-expedientes/detalles/{id:int}/{folio}"

@using Sistema_de_Seguimiento_de_Solicitudes.Models
@using System.Collections.Generic
@using SolicitudesShared
@using MudBlazor
@using Sistema_de_Seguimiento_de_Solicitudes.Services
@using System.Text.Json

@inject HttpClient Http
@inject NavigationManager Navigation
@inject IJSRuntime JSRuntime
@inject IExpedienteService ExpedienteService


<PageTitle>Detalles</PageTitle>

<div class="container mt-4">
    <h3 class="text-center">Detalles de Expediente @Expediente.Folio</h3>

    @if (Expediente != null)
    {
        <EditForm Model="@Expediente" OnValidSubmit="HandleValidSubmit" style="padding-bottom: 100px;">
            <DataAnnotationsValidator />
            <ValidationSummary />

            <div class="row">
                <!-- Barra de Etapa -->
                <div class="etapas">
                    <div class="etapa etapa-inicial"><h3>Etapa Inicial</h3></div>
                </div>
                <div class="col-md-6">
                    <table class="table table-bordered">
                        <tbody>
                            <tr>
                                <th>ID</th>
                                <td>@Expediente.Id</td>
                            </tr>
                            <tr>
                                <th>Folio</th>
                                <td>@Expediente.Folio</td>
                            </tr>
                            <tr>
                                <th>Año de Admisión</th>
                                <td><InputNumber class="form-control text-center" @bind-Value="Expediente.AnoAdmision" disabled /></td>
                            </tr>
                            <tr>
                                <th>Mes de Admisión</th>
                                <td>
                                    <InputSelect class="form-control" @bind-Value="Expediente.MesAdmision">
                                        <option disabled selected value="">-- Seleccione el mes de admisión --</option>
                                        @foreach (var mes in Catalogos.MesesAdmision)
                                        {
                                            <option value="@mes">@mes</option>
                                        }
                                    </InputSelect>
                                </td>
                            </tr>
                            <tr>
                                <th>Tipo de Solicitud</th>
                                <td>
                                    <InputSelect class="form-control" @bind-Value="_TipoSolicitudBind">
                                        <option disabled selected value="">-- Seleccione el tipo de solicitud --</option>
                                        @foreach (var tipoSolicitud in Catalogos.TiposSolicitud)
                                        {
                                            <option value="@tipoSolicitud">@tipoSolicitud</option>
                                        }
                                    </InputSelect>
                                </td>
                            </tr>
                            <tr>
                                <th>Tipo de Derecho</th>
                                <td>
                                    <InputSelect class="form-control" @bind-Value="Expediente.TipoDerecho"
                                    disabled="@(string.IsNullOrEmpty(Expediente.TipoSolicitud))">
                                        @if (Expediente.TipoSolicitud == "ARCO")
                                        {


                                            @foreach (var derechoArco in Catalogos.SolicitudARCO)
                                            {
                                                @* Expediente.TipoDerecho = derechoArco; *@

                                                <option value="@derechoArco">@derechoArco</option>
                                            }
                                        }
                                        else if (Expediente.TipoSolicitud == "DAI")
                                        {
                                            var derecho = "N/A";

                                            Expediente.TipoDerecho = derecho;

                                            <option value="@derecho">@derecho</option>
                                        }
                                    </InputSelect>
                                </td>
                            </tr>
                            <tr>
                                <th>Fecha de Inicio del Trámite</th>
                                <td>@Expediente.FechaInicioTramite</td>
                            </tr>
                            <tr>
                                <th>Fecha Límite de Respuesta (10 días hábiles)</th>
                                <td><InputDate class="form-control" @bind-Value="Expediente.FechaLimiteRespuesta10" /></td>
                            </tr>
                            <tr>
                                <th>Ampliación</th>
                                <td>
                                    <InputSelect class="form-control" @bind-Value="_AmpliacionBind">
                                        <option disabled selected value="">-- Seleccione una opción --</option>
                                        @foreach (var ampliacion in Catalogos.Ampliacion)
                                        {
                                            <option value="@ampliacion">@ampliacion</option>
                                        }
                                    </InputSelect>
                                </td>
                            </tr>
                            <tr>
                                <th>Número de Sesión del Comité</th>
                                <td><InputNumber class="form-control" @bind-Value="Expediente.NumeroSesionComiteAmpliacion" /></td>
                            </tr>
                            <tr>
                                <th>Fecha de Sesión del Comité</th>
                                <td><InputDate class="form-control" @bind-Value="Expediente.FechaSesionComiteAmpliacion" /></td>
                            </tr>
                            <tr>
                                <th>Fecha Límite de Respuesta (20 días hábiles)</th>
                                <td><InputDate class="form-control" @bind-Value="Expediente.FechaLimiteRespuesta20" /></td>
                            </tr>
                            <tr>
                                <th>Estatus</th>
                                <td>
                                    <InputSelect class="form-control" @bind-Value="Expediente.Estatus">
                                        <option disabled selected value="">-- Seleccione un estado --</option>
                                        @foreach (var estatus in Catalogos.Estatuses)
                                        {
                                            <option value="@estatus">@estatus</option>
                                        }
                                    </InputSelect>
                                </td>
                            </tr>
                            <tr>
                                <th>Fecha de Respuesta</th>
                                <td><InputDate class="form-control" @bind-Value="Expediente.FechaRespuesta" /></td>
                            </tr>
                            <tr>
                                <th>Promedio de Días de Respuesta</th>
                                <td><InputNumber class="form-control" @bind-Value="Expediente.PromedioDiasRespuesta" /></td>
                            </tr>
                        </tbody>
                    </table>
                </div>

                <div class="col-md-6">
                    <table class="table table-bordered">
                        <tbody>
                            <tr>
                                <th>Prevención</th>
                                <td><InputCheckbox id="prevencionCheckbox" @bind-Value="_prevencionBind" class="prevencion-checkbox" /></td>
                            </tr>
                            <tr>
                                <th>Subsana Prevención y Reinicio del Trámite</th>
                                <td>
                                    <InputSelect class="form-control" @bind-Value="Expediente.SubsanaPrevencion"
                                    disabled="@(!Expediente.Prevencion)">
                                        <option disabled selected value="">-- Seleccione una opción --</option>

                                        @foreach (var subsanaPrevencion in Catalogos.SubsanaPrevencion)
                                        {
                                            <option value="@subsanaPrevencion">@subsanaPrevencion</option>
                                        }

                                    </InputSelect>
                                </td>
                            </tr>
                            <tr>
                                <th>Fecha Límite para Prevención (10 días hábiles)</th>
                                <td><InputDate class="form-control" @bind-Value="Expediente.FechaLimitePrevencion" /></td>
                            </tr>
                            <tr>
                                <th>Cómo fue Recibida/Registrada en la PNT</th>
                                <td>
                                    <InputSelect class="form-control" @bind-Value="Expediente.RecibidaRegistrada">
                                        <option disabled selected value="">-- Seleccione una opción --</option>
                                        @foreach (var recibida in Catalogos.ComoFueRecibida)
                                        {
                                            <option value="@recibida">@recibida</option>
                                        }
                                    </InputSelect>
                                </td>
                            </tr>
                            <tr>
                                <th>Medio de Recepción en Solicitud Manual</th>
                                <td>
                                    <InputSelect class="form-control" @bind-Value="Expediente.MedioRecepcionSolicitudManual"
                                                 disabled="@(Expediente.RecibidaRegistrada)">
                                        <option disabled selected value="">-- Seleccione una opción --</option>

                                        @foreach (var medioRecepcion in Catalogos.MedioRecepcionSolicitudManual)
                                        {
                                            <option value="@medioRecepcion">@medioRecepcion</option>
                                        }

                                    </InputSelect>
                                </td>
                            </tr>
                            <tr>
                                <th>Como desea recibir la respuesta la persona solicitante</th>
                                <td>
                                    <InputSelect class="form-control" @bind-Value="Expediente.ComoDeseaRecibirRespuestaPersonaSolicitante">
                                        <option disabled selected value="">-- Seleccione una opción --</option>
                                        @foreach (var opciones in Catalogos.ComoDeseaRecibirRespuesta)
                                        {
                                            <option value="@opciones">@opciones</option>
                                        }
                                    </InputSelect>
                                </td>
                            </tr>
                            <tr>
                                <th>Nombre</th>
                                <td><InputText class="form-control" @bind-Value="Expediente.Nombre" /></td>
                            </tr>
                            <tr>
                                <th>Correo Electrónico</th>
                                <td><InputText class="form-control" @bind-Value="Expediente.CorreoElectronico" /></td>
                            </tr>
                            <tr>
                                <th>Contenido de la Solicitud</th>
                                <td>
                                    <textarea class="form-control" rows="10">@Expediente.ContenidoSolicitud</textarea>
                                </td>
                            </tr>
                        </tbody>
                    </table>
                </div>

                <!-- Barra de Etapa -->
                <div class="etapas">
                    <div class="etapa etapa-seguimiento"><h3>Etapa de Seguimiento</h3></div>
                </div>
                <div class="col-md-6">
                    <table class="table table-bordered">
                        <tbody>
                            <tr>
                                <th>Área que Posee la Información</th>
                                <td>
                                    <InputSelect class="form-control" @bind-Value="Expediente.AreaInformacion">
                                        <option disabled selected value="">-- Seleccione el área --</option>
                                        @foreach (var area in Catalogos.AreaPoseedoraInformacion)
                                        {
                                            <option value="@area">@area</option>
                                        }
                                    </InputSelect>
                                </td>
                            </tr>
                        </tbody>
                    </table>
                </div>

                <!-- Barra de Etapa -->
                <div class="etapas">
                    <div class="etapa etapa-final"><h3>Etapa Final</h3></div>
                </div>
                <div class="col-md-6">
                    <table class="table table-bordered">
                        <tbody>
                            <tr>
                                <th>Materia</th>
                                <td>
                                    <InputSelect class="form-control" @bind-Value="Expediente.Materia">
                                        <option disabled selected value="">-- Seleccione la materia --</option>
                                        @foreach (var materia in Catalogos.Materia)
                                        {
                                            <option value="@materia">@materia</option>
                                        }
                                    </InputSelect>
                                </td>
                            </tr>
                            <tr>
                                <th>Ciudad</th>
                                <td>
                                    <InputSelect class="form-control" @bind-Value="Expediente.Ciudad">
                                        <option disabled selected value="">-- Seleccione la ciudad --</option>
                                        @foreach (var ciudad in Catalogos.Ciudades)
                                        {
                                            <option value="@ciudad">@ciudad</option>
                                        }
                                    </InputSelect>
                                </td>
                            </tr>
                            <tr>
                                <th>Temática</th>
                                <td>
                                    <InputSelect class="form-control" @bind-value="TematicaBind">
                                        <option disabled selected value="">-- Seleccione una temática --</option>
                                        @foreach (var tematica in Catalogos.Tematica)
                                        {
                                            <option value="@tematica">@tematica</option>
                                        }
                                    </InputSelect>
                                </td>
                            </tr>
                            <tr>
                                <th>Temática Específica</th>
                                <td>
                                    <InputSelect class="form-control" @bind-Value="Expediente.TematicaEspecifica"
                                    disabled="@(string.IsNullOrEmpty(Expediente.Tematica))">
                                        <option disabled selected value="">-- Seleccione una temática específica --</option> 
                                        @foreach (var tematicaEspecifica in TematicasEspecificasActuales)
                                        {
                                            <option value="@tematicaEspecifica">@tematicaEspecifica</option>
                                        }
                                    </InputSelect>
                                </td>
                            </tr>
                            <tr>
                                <th>Sentido de Respuesta</th>
                                <td>
                                    <InputSelect class="form-control" @bind-Value="Expediente.SentidoRespuesta">
                                        <option disabled selected value="">-- Seleccione el sentido de respuesta --</option>
                                        @foreach (var sentidoRespuesta in Catalogos.SentidoRespuesta)
                                        {
                                            <option value="@sentidoRespuesta">@sentidoRespuesta</option>
                                        }
                                    </InputSelect>
                                </td>
                            </tr>
                            <tr>
                                <th>Precisión del Sentido de Respuesta</th>
                                <td><InputText class="form-control" @bind-Value="Expediente.PrecisionSentidoRespuesta" /></td>
                            </tr>
                            <tr>
                                <th>Modalidad de Entrega</th>
                                <td>
                                    <InputSelect class="form-control" @bind-Value="Expediente.ModalidadEntrega">
                                        <option disabled selected value="">-- Seleccione la modalidad de entrega --</option>
                                        @foreach (var modalidadEntrega in Catalogos.ModalidadEntrega)
                                        {
                                            <option value="@modalidadEntrega">@modalidadEntrega</option>
                                        }
                                    </InputSelect>

                                </td>
                            </tr>
                        </tbody>
                    </table>
                </div>

                <div class="col-md-6">
                    <table class="table table-bordered">
                        <tbody>
                            <tr>
                                <th>Cobro</th>
                                <td>
                                    <InputSelect class="form-control" @bind-Value="Expediente.Cobro">
                                        <option disabled selected value="">-- Seleccione una opción de cobro --</option>
                                        @foreach (var cobro in Catalogos.Cobros)
                                        {
                                            <option value="@cobro">@cobro</option>
                                        }
                                    </InputSelect>
                                </td>
                            </tr>
                            <tr>
                                <th>Recurso de Revisión</th>
                                <td>
                                    <InputSelect class="form-control" @bind-Value="Expediente.RecursoRevision">
                                        @foreach (var recursoRevision in Catalogos.RecursoRevision)
                                        {
                                            <option value="@recursoRevision">@recursoRevision</option>
                                        }
                                    </InputSelect>
                                </td>
                            </tr>
                            <tr>
                                <th>Número de Recurso de Revisión</th>
                                <td><InputNumber class="form-control" @bind-Value="Expediente.NumeroRecursoRevision" /></td>
                            </tr>
                            <tr>
                                <th>Datos del Recurso de Revisión</th>
                                <td><InputText class="form-control" @bind-Value="Expediente.DatosRecursoRevision" /></td>
                            </tr>
                            <tr>
                                <th>Nota</th>
                                <td><InputTextArea class="form-control" @bind-Value="Expediente.Nota" rows="4" /></td>
                            </tr>
                        </tbody>
                    </table>
                </div>
            </div>

            <button type="submit" class="btn btn-primary">Guardar cambios</button>
        </EditForm>
    }
    else
    {
        <p class="text-center text-muted">Cargando detalles...</p>
    }
</div>

@code {
    [Parameter]
    public int Id { get; set; }

    [Parameter]
    public string Folio { get; set; } = string.Empty;

    private Expediente Expediente { get; set; } = new Expediente();

    List<ExpedienteDTO>? listaExpedientes = null;
    private List<ExpedienteDTO> ExpedientesFiltrados { get; set; } = new();
    private ExpedienteDTO ExpedienteDTO { get; set; } = new ExpedienteDTO();

    private ExpedienteDTO NuevoExpediente { get; set; } = new ExpedienteDTO();

    // Lista para almacenar las temáticas específicas actuales
    private List<string> TematicasEspecificasActuales { get; set; } = new();


    protected override async Task OnInitializedAsync()
    {
        // Obtener todos los expedientes
        listaExpedientes = await ExpedienteService.Lista();

        // Filtrar el expediente que corresponde con el ID de la URL
        var expedienteDTO = listaExpedientes.FirstOrDefault(e => e.Id == Id);

        // Si el expediente no se encuentra, puedes redirigir o mostrar un mensaje
        if (expedienteDTO != null)
        {
            // Mapear los datos de ExpedienteDTO a Expediente
            Expediente = new Expediente
                {
                //Etapa Inicial
                    Id = expedienteDTO.Id,
                    Folio = expedienteDTO.Folio ?? string.Empty,
                    MesAdmision = expedienteDTO.MesAdmision ?? string.Empty,
                    TipoSolicitud = expedienteDTO.TipoSolicitud ?? string.Empty,
                    TipoDerecho = expedienteDTO.TipoDerecho ?? string.Empty,
                    FechaInicioTramite = expedienteDTO.FechaInicio,
                    FechaLimiteRespuesta10 = expedienteDTO.FechaLimiteRespuesta10dias,
                    Ampliacion = expedienteDTO.Ampliacion ?? string.Empty,
                    FechaLimiteRespuesta20 = expedienteDTO.FechaLimiteRespuesta20dias,
                    Estatus = expedienteDTO.Estado ?? string.Empty,
                    FechaRespuesta = expedienteDTO.FechaRespuesta ?? default(DateTime),
                    PromedioDiasRespuesta = expedienteDTO.PromedioDiasRespuesta,
                    Prevencion = expedienteDTO.Prevencion,
                    SubsanaPrevencion = expedienteDTO.SubsanaPrevencionReinicoTramite ?? string.Empty,
                    FechaLimitePrevencion = expedienteDTO.FechaLimitePrevencion10dias ?? default(DateTime),
                    ComoDeseaRecibirRespuestaPersonaSolicitante = expedienteDTO.ComoDeseaRecibirRespuestaPersonaSolicitante ?? string.Empty,
                    Nombre = expedienteDTO.NombreSolicitante ?? string.Empty,
                    CorreoElectronico = expedienteDTO.CorreoElectronicoSolicitante ?? string.Empty,
                    ContenidoSolicitud = expedienteDTO.ContenidoSolicitud ?? string.Empty,

                //Etapa de Seguimiento
                    AreaInformacion = expedienteDTO.AreaPoseedoraInformacion ?? string.Empty,

                //Etapa Final
                    Materia = expedienteDTO.Materia ?? string.Empty,
                    Ciudad = expedienteDTO.CiudadSolicitante ?? string.Empty,
                    Tematica = expedienteDTO.Tematica ?? string.Empty,
                    TematicaEspecifica = expedienteDTO.TematicaEspecifica ?? string.Empty,
                    SentidoRespuesta = expedienteDTO.SentidoRespuesta ?? string.Empty,
                    PrecisionSentidoRespuesta = expedienteDTO.PrecisionSentidoRespuesta ?? string.Empty,
                    ModalidadEntrega = expedienteDTO.ModalidadEntrega ?? string.Empty,
                    Cobro = expedienteDTO.Cobro ?? string.Empty,
                    RecursoRevision = expedienteDTO.RecursoRevision ?? string.Empty,
                    DatosRecursoRevision = expedienteDTO.DatosRecursoRevision ?? string.Empty,
                    Nota = expedienteDTO.Nota ?? string.Empty
                };
        }
        else
        {
            // Redirigir si no se encuentra el expediente (opcional)
            Navigation.NavigateTo("/indice-expedientes");
        }


        Expediente.AnoAdmision = DateTime.Now.Year;

        ActualizarTematicasEspecificas();
    }

    // Calculo de fechas limites
    private DateTime CalcularFechaLimite(DateTime fechaInicio, string tipoSolicitud)
    {
        int diasAdicionales = tipoSolicitud == "DAI" ? 10 : 20;
        DateTime fechaLimite = fechaInicio;

        if (Expediente.Ampliacion == "SI")
        {
            diasAdicionales = diasAdicionales * 2;
        }

        // if (Expediente.Prevencion == true)
        // {
        //     DateTime fechaInicioPrevencion = DateTime.Now;

        //     int diasAdicionalesPrevencion = 10;
        // }


        while (diasAdicionales > 0)
        {
            fechaLimite = fechaLimite.AddDays(1);

            // Si el día no es sábado ni domingo, cuenta como hábil
            if (fechaLimite.DayOfWeek != DayOfWeek.Saturday && fechaLimite.DayOfWeek != DayOfWeek.Sunday)
            {
                diasAdicionales--;
            }
        }

        return fechaLimite;
    }

    // Actualizar la fecha límite de prevencion
    private DateTime CalcularFechaLimitePrevencion()
    {
        DateTime fechaInicioPrevencion = DateTime.Now;
        DateTime fechaLimitePrevencion = fechaInicioPrevencion;

        int diasAdicionalesPrevencion = 10;

        while (diasAdicionalesPrevencion > 0)
        {
            fechaLimitePrevencion = fechaLimitePrevencion.AddDays(1);
            // Si el día no es sábado ni domingo, cuenta como hábil
            if (fechaLimitePrevencion.DayOfWeek != DayOfWeek.Saturday && fechaLimitePrevencion.DayOfWeek != DayOfWeek.Sunday)
            {
                diasAdicionalesPrevencion--;
            }
        }

        return fechaLimitePrevencion;
    }

    private void ActualizarFechaLimite()
    {
        if (!string.IsNullOrEmpty(Expediente.TipoSolicitud))
        {
            if (Expediente.TipoSolicitud == "ARCO")
            {
                Expediente.FechaLimiteRespuesta20 = CalcularFechaLimite(Expediente.FechaInicioTramite, Expediente.TipoSolicitud);
                Expediente.FechaLimiteRespuesta10 = null;
            }
            else if (Expediente.TipoSolicitud == "DAI")
            {
                Expediente.FechaLimiteRespuesta10 = CalcularFechaLimite(Expediente.FechaInicioTramite, Expediente.TipoSolicitud);
                Expediente.FechaLimiteRespuesta20 = null;
            }
        }

        if (Expediente.Prevencion)
        {
            Expediente.FechaLimitePrevencion = CalcularFechaLimitePrevencion();
        }
    }



    // Propiedad para llamar la funcion para la actualizacion de fecha limite
    private string _TipoSolicitudBind
    {
        get => Expediente.TipoSolicitud;
        set
        {
            Expediente.TipoSolicitud = value;
            ActualizarFechaLimite();

            TipoSolicitudCambio();
        }
    }

    private string _AmpliacionBind
    {
        get => Expediente.Ampliacion;
        set
        {
            Expediente.Ampliacion = value;
            ActualizarFechaLimite();
        }
    }

    private bool _prevencionBind
    {
        get => Expediente.Prevencion;
        set
        {
            Expediente.Prevencion = value;
            ActualizarFechaLimite();
        }
    }


    // Propiedad puente para manejar el cambio de Temática
    private string TematicaBind
    {
        get => Expediente.Tematica;
        set
        {
            if (Expediente.Tematica != value)
            {
                Expediente.Tematica = value;
                ActualizarTematicasEspecificas();
            }
        }
    }
    
    private void TipoSolicitudCambio()
    {
        var nuevaSolicitud = Expediente.TipoSolicitud;
        //Expediente.TipoSolicitud = nuevaSolicitud;

        // Si se seleccionó ARCO, establecer la primera opción como predeterminada
        if (nuevaSolicitud == "ARCO" && Catalogos.SolicitudARCO.Any())
        {
            Expediente.TipoDerecho = Catalogos.SolicitudARCO.First();
        }
        else
        {
            Expediente.TipoDerecho = string.Empty;
        }
    }

    // Actualizar las temáticas específicas disponibles
    private void ActualizarTematicasEspecificas()
    {

        Expediente.TematicaEspecifica = string.Empty; // Limpiamos la selección anterior

        if (Expediente.Tematica != null && MapeoTematicasEspecificas.TryGetValue(Expediente.Tematica,
            out var tematicas))
        {
            TematicasEspecificasActuales = tematicas;

            // Si solo hay una opción que coincide con la temática general
            if (tematicas.Count == 1 && tematicas[0] == Expediente.Tematica)
            {
                Expediente.TematicaEspecifica = Expediente.Tematica; // Auto-seleccionar
            }
        }
        else
        {
            TematicasEspecificasActuales = new List<string>();
        }

        // Opcional: Forzar actualización de la UI si es necesario
        StateHasChanged();
    }

    // Mapeo de Tematicas especificas
    private static readonly Dictionary<string, List<string>> MapeoTematicasEspecificas = new()
        {
            ["ACTIVIDADES DEL CJE"] = Catalogos.ActividadesCJE,
            ["ACTIVIDADES DEL TSJ"] = Catalogos.ActividadesTSJ,
            ["ACTIVIDADES DE LOS ÓRGANOS JURISDICCIONALES DE PRIMERA INSTANCIA"] = Catalogos.ActividadesOrganosJurisdiccionales,
            ["ADMINISTRACIÓN JUDICIAL"] = Catalogos.AdministracionJudicial,
            ["INFORMACIÓN ESTADÍSTICA"] = Catalogos.InformacionEstadistica,
            ["MANEJO PRESUPUESTAL"] = Catalogos.ManejoPresupuestal,
            ["ORIENTACIÓN"] = Catalogos.Orientacion,
            ["PRESTACIONES LABORALES"] = Catalogos.PrestacionesLaborales,
            ["USO DE RECURSOS PÚBLICOS"] = Catalogos.UsoRecursosPublicos,

        // Temáticas que deben copiar el valor general
            ["DATOS PERSONALES"] = new List<string> { "DATOS PERSONALES" },
            ["DESECHADA"] = new List<string> { "DESECHADA" },
            ["IMPROCEDENCIA"] = new List<string> { "IMPROCEDENCIA" },
            ["INCOMPETENCIA"] = new List<string> { "INCOMPETENCIA" },
            ["NOTORIA INCOMPETENCIA"] = new List<string> { "NOTORIA INCOMPETENCIA" }
        };


    private async Task HandleValidSubmit()
    {
        try
        {
            // Mapear Expediente a ExpedienteDTO
            var expedienteDTO = new ExpedienteDTO
                {
                    Id = Expediente.Id,
                    Folio = Expediente.Folio,
                    MesAdmision = Expediente.MesAdmision,
                    TipoSolicitud = Expediente.TipoSolicitud,
                    TipoDerecho = Expediente.TipoDerecho,
                    FechaInicio = Expediente.FechaInicioTramite,
                    FechaLimiteRespuesta10dias = Expediente.FechaLimiteRespuesta10,
                    Ampliacion = Expediente.Ampliacion,
                    FechaLimiteRespuesta20dias = Expediente.FechaLimiteRespuesta20,
                    Estado = Expediente.Estatus,
                    FechaRespuesta = Expediente.FechaRespuesta,
                    PromedioDiasRespuesta = Expediente.PromedioDiasRespuesta,
                    Prevencion = Expediente.Prevencion,
                    SubsanaPrevencionReinicoTramite = Expediente.SubsanaPrevencion,
                    FechaLimitePrevencion10dias = Expediente.FechaLimitePrevencion,
                    ComoDeseaRecibirRespuestaPersonaSolicitante = Expediente.ComoDeseaRecibirRespuestaPersonaSolicitante,
                    NombreSolicitante = Expediente.Nombre,
                    CorreoElectronicoSolicitante = Expediente.CorreoElectronico,
                    ContenidoSolicitud = Expediente.ContenidoSolicitud,
                    AreaPoseedoraInformacion = Expediente.AreaInformacion,
                    Materia = Expediente.Materia,
                    CiudadSolicitante = Expediente.Ciudad,
                    Tematica = Expediente.Tematica,
                    TematicaEspecifica = Expediente.TematicaEspecifica,
                    SentidoRespuesta = Expediente.SentidoRespuesta,
                    PrecisionSentidoRespuesta = Expediente.PrecisionSentidoRespuesta,
                    ModalidadEntrega = Expediente.ModalidadEntrega,
                    Cobro = Expediente.Cobro,
                    RecursoRevision = Expediente.RecursoRevision,
                    DatosRecursoRevision = Expediente.DatosRecursoRevision,
                    Nota = Expediente.Nota
                };

            Console.WriteLine($"Enviando expediente: {JsonSerializer.Serialize(expedienteDTO)}");

            await JSRuntime.InvokeVoidAsync("console.log", Expediente.TematicaEspecifica);


            // Llamar al servicio para actualizar el expediente
            var response = await ExpedienteService.Actualizar(expedienteDTO);

            if (response.Exito )
            {
                await JSRuntime.InvokeVoidAsync("alert", "Cambios guardados correctamente.");
                Navigation.NavigateTo("/indice-expedientes");
            }
            else
            {
                await JSRuntime.InvokeVoidAsync("alert", $"Error: {response.Mensaje}");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error: {ex.Message}");
            await JSRuntime.InvokeVoidAsync("alert", $"Error al guardar los cambios: {ex.Message}");
        }
    }
}

    <style>

    .prevencion-checkbox {
        width: 25px; 
        height: 25px; 
        accent-color: #007bff; 
        margin-right: 10px; 
    }


    label[for="prevencionCheckbox"] {
        font-size: 14px; 
        color: #333; 
        font-weight: bold; 
    }


    .prevencion-checkbox:hover {
        cursor: pointer; 
        opacity: 0.8; 
    }

    </style>