@page "/historial-solicitudes"

@inject IExpedienteService ExpedienteService
@inject NavigationManager Navigation
@inject HttpClient Http


@using Sistema_de_Seguimiento_de_Solicitudes.Services
@using SolicitudesShared

<div class="historial-container">
    <h3>📁 Historial de Solicitudes</h3>

    <div class="row mb-3">
        <div class="col-md-6">
            <input type="text" class="form-control" placeholder="🔍 Buscar por nombre o folio..." @bind="busqueda" @bind:event="oninput" />
        </div>
        <div class="col-md-4">
            <select class="form-control" @bind="estadoSeleccionado">
                <option value="">🗂️ Todos los Estados</option>
                <option value="TERMINADA">✅ Terminada</option>
                <option value="DESECHADA">❌ Desechada</option>
                <option value="CANCELADA">⚠️ Cancelada</option>
            </select>
        </div>
        <div class="col-md-4">
        <button class="btn btn-success mb-3" @onclick="ExportarExcel">📤 Exportar a Excel</button>
        </div>
    </div>

    <div class="table-responsive">
        <table class="table">
            <thead>
                <tr>
                    <th>DETALLES</th>
                    <th>ID</th>
                    <th>FOLIO</th>
                    <th>NOMBRE</th>
                    <th>FECHA DE INICIO</th>
                    <th>ESTADO</th>
                </tr>
            </thead>
            <tbody>
                @if (SolicitudesFiltradas != null && SolicitudesFiltradas.Any())
                {
                    @foreach (var solicitud in SolicitudesFiltradas)
                    {
                        <tr>
                            <td>
                                <button class="btn-detalles" @onclick="() => VerDetalle(solicitud.Id, solicitud.Folio)"> 🔍 Ver Detalles </button>
                            </td>
                            <td>@solicitud.Id</td>
                            <td>@solicitud.Folio</td>
                            <td>@solicitud.NombreSolicitante</td>
                            <td>@solicitud.FechaInicio.ToString("dd/MM/yyyy")</td>
                            <td>
                                <span class="badge @GetEstadoClass(solicitud.Estado)">
                                    @solicitud.Estado
                                </span>
                            </td>
                        </tr>
                    }
                }
                else
                {
                    <tr>
                        <td colspan="6" class="text-center">No hay resultados para tu búsqueda.</td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
</div>

@code {
    private List<ExpedienteDTO> SolicitudesHistorial = new();
    private string busqueda = string.Empty;
    private string estadoSeleccionado = string.Empty;

    private IEnumerable<ExpedienteDTO> SolicitudesFiltradas =>
        SolicitudesHistorial.Where(s =>
            (string.IsNullOrWhiteSpace(busqueda) ||
                (!string.IsNullOrEmpty(s.NombreSolicitante) && s.NombreSolicitante.Contains(busqueda, StringComparison.OrdinalIgnoreCase)) ||
                (!string.IsNullOrEmpty(s.Folio) && s.Folio.Contains(busqueda, StringComparison.OrdinalIgnoreCase)))
            &&
            (string.IsNullOrWhiteSpace(estadoSeleccionado) || s.Estado == estadoSeleccionado)
        );

    protected override async Task OnInitializedAsync()
    {
        var todas = await ExpedienteService.Lista();
        SolicitudesHistorial = todas
            .Where(e => e.Estado == "TERMINADA" || e.Estado == "DESECHADA" || e.Estado == "CANCELADA")
            .OrderByDescending(e => e.FechaInicio)
            .ToList();
    }

    private async Task ExportarExcel()
    {
        var url = $"api/expedientes/exportar?busqueda={Uri.EscapeDataString(busqueda)}&estado={Uri.EscapeDataString(estadoSeleccionado)}";
        Navigation.NavigateTo(url, true); // Forzamos descarga
    }


    private void VerDetalle(int id, string folio)
    {
        Navigation.NavigateTo($"/indice-expedientes/detalles/{id}/{folio}");
    }

    private string GetEstadoClass(string estado)
    {
        return estado switch
        {
            "TERMINADA" => "badge-success",
            "DESECHADA" => "badge-danger",
            "CANCELADA" => "badge-warning",
            _ => "badge-secondary"
        };
    }
}